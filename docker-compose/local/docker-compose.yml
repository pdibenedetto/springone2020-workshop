---
version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    container_name: kstreams-demo-zookeeper
    ports:
    - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.1
    container_name: kstreams-demo-kafka
    hostname: kafka
    depends_on:
    - zookeeper
    ports:
    - 9092:9092
    - 19092:19092
    environment:
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:19092"
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_ADVERTISED_LISTENERS: LOCALHOST://localhost:9092,DOCKER://kafka:19092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  ksqldb:
    image: confluentinc/ksqldb-server:0.6.0
    hostname: ksqldb
    container_name: kstreams-demo-ksqldb
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:19092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schemaregistry:8085"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.6.0
    container_name: kstreams-demo-ksqldb-cli
    depends_on:
      - ksqldb
    entrypoint: /bin/sh
    tty: true

  schemaregistry:
    image: confluentinc/cp-schema-registry:5.5.1
    container_name: kstreams-demo-sr
    restart: always
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:19092"
      SCHEMA_REGISTRY_HOST_NAME: microservices-dev-sr
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
    ports:
      - 8085:8085

  connect:
    image: confluentinc/cp-kafka-connect:5.5.1
    container_name: kstreams-demo-connect
    restart: always
    ports:
    - "8083:8083"
    depends_on:
    - zookeeper
    - kafka
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_LISTENERS: "http://0.0.0.0:8083"
      CONNECT_GROUP_ID: "connect"
      CONNECT_PRODUCER_CLIENT_ID: "connect-worker-producer"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/connect-plugins"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.1.jar
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.1
    container_name: kstreams-demo-control-center
    restart: always
    depends_on:
    - zookeeper
    - kafka
    - connect
    ports:
    - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:19092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      # Amount of heap to use for internal caches. Increase for better thoughput
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_CONNECT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_DEPRECATED_VIEWS_ENABLE: "true"
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      # HTTP and HTTPS to Control Center UI 
      CONTROL_CENTER_REST_LISTENERS: "http://0.0.0.0:9021"
      CONTROL_CENTER_KSQL_URL: "http://ksqldb:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://0.0.0.0:8088"

  account-db:
    container_name: kstreams-demo-account-db
    image: postgres
    restart: always
    ports:
    - 5432:5432
    environment:
      POSTGRES_USER: account-store
      POSTGRES_PASSWORD: account-store